
In recent years, neural networks with many hidden lay-
ers, which are usually called deep neural networks, have
been used in a lot of machine learning and visual comput-
ing tasks, delivering unprecedented good results [15, 3, 11].
Unlike other machine learning approaches relying on linear
models (possibly with kernel extensions), neural networks
are inherently nonlinear models because of the nonlinear
activation functions used in the neurons. Properties and ap-
plications of neural networks have been studied [1]. Some
earlier, theoretical results, such as the Universal Approx-
∗Indicates equal contributions.
imation Theorem, which states that, any continuous func-
tion on a compact subset of Rn can be approximated by a
feed-forward network with a single hidden layer containing
a ﬁnite number of neurons [5, 13], have alluded to the po-
tential of deep neural networks, although much more and
better understanding has yet to be developed.
Recent years have witnessed various efforts to this end.
In particular, there are studies aiming at investigating the
reason why deeper networks generally perform better.
It
was shown that [6], there exist families of functions which
can be approximated much more efﬁciently by a deep neu-
ral network than a shallow one, when the number of hid-
den units in the networks is kept the same.
In [22, 19],
researchers investigated the relationship between the the
depth of the neural networks and the complexity of func-
tions that are computable by the networks.
It was also
shown that, when using Rectiﬁed Linear Unit (ReLU) [7]
as the activation function, the number of response regions
of the neural network grows exponentially in the number of
hidden layers but in polynomial in the number of neurons
in one layer. This also appears to be intuitive, as the more
number of hidden layers a network has, the more number of
hierarchical nonlinear mappings the inputs will go through,
hence enabling a more ﬂexible representation by the net-
work. One thread of research towards increasing the ﬂexi-
bility of the networks is by using a potentially better activa-
tion function, which is the source of the nonlinearity of the
model. Despite the widespread usage of ReLU, the research
on how the activation functions may affect the ﬂexibility of
a network has not been well discussed.
In this paper, we propose a novel activation function
named Power Linear Unit (PoLU). We prove that networks
using PoLU are able to increase the maximal number of re-
sponse regions. We further compare PoLU to other state-
of-the-art activation functions in different networks and on
different datasets. Experimental results demonstrate that
PoLU outperforms almost all leading activation functions
that have been widely used.
Figure 1. (a): the plot of PoLU (n = 2), ReLU and ELU. (b): the plot of PoLU for n = {1, 1.5, 2}. (c): the plot of the derivatives of PoLU
for n = {1, 1.5, 2}
2. Related Work
Rectiﬁed Linear Unit (ReLU), which is called ramp
function sometimes, was ﬁrst applied to restricted Boltz-
mann machine (RBM) in [20], and to neural networks [7]
later.
It is among the most popular activation function
nowadays. The ReLU activation function can be deﬁned
as f : R → R, where f (x) = max(0, x), and x is the input
of the neuron. Comparing to traditional activation functions
like the logistic sigmoid units or hyperbolic tangent units,
which are anti-symmetric, ReLU is one-sided. This prop-
erty encourages the network to be sparse (i.e. the outputs
of the hidden units are sparse), and thus more biologically
plausible. In the experiments stated in [7], the sparsity of
the network can be from 50% to 80%. Using ReLUs as
activation functions also decreases the computational cost,
as they can be implemented via IF statements. Most im-
portantly, ReLU alleviates the problem of vanishing gradi-
ent [12], as the derivative of its positive part is always 1.
This vanishing problem occurs in sigmoid and hyperbolic
tangent units, where the gradients vanish to 0 after some
epochs of training (due to the horizontal asymptotes) and
stop the learning in the corresponding parts of the network.
Although ReLU has several advantages, there are also
some potential problems. For instance, ReLUs can ”die”
sometimes: once a neuron outputs 0, the corresponding
weights may not be updated again, since the gradients are
also 0. Another issue is that, since ReLU is non-negative,
the mean of the outputs of ReLUs in a layer will be positive,
which leads to the bias shift effect [4], and may decrease the
speed of learning.
To overcome these problems, researchers proposed some
variants of ReLU. Leaky Rectiﬁed Linear Unit (LReLU)
[18] sets the output to be directly proportional to the input
with a very small proportional constant α (i.e. α = 0.01).
This is equivalent to f (x) = max(x, αx). Under this def-
inition of activation functions, the neurons won’t ”die” as
the gradient is small but still non-zero. Parametric Recti-
ﬁed Linear Unit (PReLU) [9] makes α to be a learnable
parameter instead of a ﬁxed constant. Since PReLU needs
extra space and time complexity to learn αs, Randomized
Leaky Rectiﬁed Linear Unit (RReLU) [25] was proposed,
where α is a random number sampled from a uniform dis-
tribution. Shifted Rectiﬁed Linear Unit (SReLU) and Ex-
ponential Linear Unit (ELU) [4] both try to make the mean
activation towards 0 such that the gradients are closer to the
natural gradient [16], and hence speeding up the learning
process. ELU also makes the gradient of its negative part
to be non-zero to avoid dead neuron. However, considering
the function of ELU in the negative part, α(ex − 1), we can
see that α represents the slope of the function at x → 0−,
and the saturation value (i.e. the value of y when x → −∞)
will be changed simultaneously if we vary the value of α.
So, it is impossible to change the slope of the curve around
x = 0 while keeping the asymptote y = −1. In the lat-
ter section, we demonstrate that under different saturation
value, the performance of y = −1 is a better choice for
ELU (see Fig.3). Therefore, we would like to develop an
activation function where the slope at x → 0− is indepen-
dent of the asymptote of saturation.
For our proposed Power Linear Units (PoLUs), we adopt
the advantages of the activation functions mentioned above.
First, the output of PoLUs for positive input is designed to
be identity to avoid gradient vanishing problem. Second,
PoLUs have non-zero output for negative inputs, such that
the output mean of the units is close to zero, and thus reduce
the bias shift effect. Thirdly, there is a saturation on the neg-
ative part of PoLU, which makes it more noise-robust for
negative inputs. Last but not least, PoLUs are able to map
more portions of every layer’s input space to the same range
by using power function and thus increase the response re-
gions of the neural network. More details are to presented
in the next section.
3. Power Linear Unit
In this section we propose PoLU and analyze the rela-
tion between the PoLU and the number of response regions.
Based on [19], we redeﬁne some terms such that the idea
can be extended to a more general case. We ﬁrst start by
giving the deﬁnitions.
Deﬁnition 1. Let fn : R → R be a function, the Power
Linear Unit (PoLU) can be deﬁned as follows:
(cid:40)
(cid:40)
fn(x) =
(1 − x)−n − 1
and its derivative can be expressed as:
f(cid:48)
n(x) =
n(1 − x)−n−1
if x ≥ 0
if x < 0
if x ≥ 0
if x < 0
(1)
(2)
The parameter n controls the rate of change of PoLUs at
the negative part. Fig.1(b) and (c) show the plots of PoLU
and the derivative of PoLU under different power values n.
Similar to many previously proposed models of activation
functions, keeping the identity as the positive section helps
PoLUs against the gradient vanishing problem. PoLUs also
have non-zero outputs and a saturation plateau for negative
inputs. These not only increase their ability to learn a stable
representation, but also make the mean of the output of the
units closer to zero, which reduces the bias shift effect [4].
In contrast to the previously proposed activation functions,
PoLU has an intersection to y = x at its negative regime
when n > 1, which is proven to be good for increasing the
number of response regions (see the proof of Theorem 2).
Although ELU also has the same property when α > 1,
using such value of α may also push the mean activation
away from zero (as α is a scaling factor), which typically
leads to worse performance.
Deﬁnition 2. [19] Let F : RM → RN be a map, S ⊆ RM
and T ⊆ RM . F identiﬁes S and T if F (S) = F (T ).
Deﬁnition 3. A response region of a function F is a maxi-
mal connected subset of the domain on which F is differen-
tiable and monotonic.
As our proposed activation function is nonlinear for neg-
ative input, we deﬁne response region in a more general way
(i.e. requiring F to be differentialbe and monotonic instead
of being just linear). Under this deﬁnition, Lemma 1 in [22]
leads to Theorem 1, and the proofs in [22, 19] still hold un-
der deﬁnition 3.
Theorem 1. [22] The maximal number of response regions
of the functions computed by a neural network, which has
n0 input units, one hidden layer with n1 PoLUs, is bounded
below by(cid:80)n0
j=0
(cid:0)n1
(cid:1).
Figure 2. The plots of different curves for n = 2. (a) blue: y =
fn(x); red: y = fn(−x); (b) y = ˆϕn(x); (c) y = ϕn(x, 0.5).
The distance from the troughts to the origin is 0.5; (d) blue: y =
S2(x); red(upper): y = b; red(lower): y = a. The intervals which
are subsets of {x | a < S2(x) < b} are mapped to the same set.
Theorem 2. The maximal number of response regions of
the functions computed by a neural network, which has n0
input units, L hidden layers with ni ≥ n0 PoLUs at the i-th
layer, is bounded below by
(cid:32)L−1(cid:89)
(cid:22) ni
(cid:23)n0(cid:33) n0(cid:88)
(cid:18)nL
(cid:19)
n0
i=1
j=0
2n0(L−1)
(3)
Proof. We ﬁrst start with two PoLUs. Let n > 1 and ˆϕn :
R → R be a function deﬁned as:
ˆϕn(x) = fn(x) + fn(−x)
(4)
It is easy to prove that there is an intersection to y = x at
the negative region of PoLU for n > 1, which causes two
local minima exist in y = ˆϕn(x). While a function formed
by two ReLUs, following the construction in [19], can only
identify two regions, ˆϕn, which is formed by two PoLUs,
can identify four regions.
As the inputs always go through afﬁne maps before they
reach the activation functions, we choose the weights and
bias of these afﬁne transformations. Consider the modiﬁed
version of ˆϕn, ϕn : R × [0, 1) → R, which is deﬁned as
follows:
ϕn(x, d) = fn(an(d)x + bn(d)) + fn(−an(d)x + bn(d))
(5)
We can always choose some suitable a > 0 and b > 0 to
(i) rescale ϕ such that ϕ(−1, d) = ϕ(0, d) = ϕ(1, d). (ii)
separate the two troughs by a horizontal line with its length
equals to 2d < 1, Fig. 2(c) is the plot of ϕn(x, 0.5), the
distance from the troughs to the origin is equal to 0.5.
Consider a layer of n1 PoLUs with n0 input, where n1 ≥
n0. The PoLUs are separated into n0 disjoint subsets of
cardinality p, which is the largest even number not greater
than n1/n0 (i.e. p = 2k ≤ (cid:98)n1/n0(cid:99) for some k ∈ N), the
remaining PoLUs are ignored.
Without loss of generality, we consider the j-th input of
the layer, where j ∈ {1, ..., n0}. As we can choose the input
weights and biases, the functions can be constructed in the
following way:
h1(x) = ϕn(x, d1)
h2(x) = ϕn(x, d2)
...
hk(x) = ϕn(x, dk)
(6)
and let (−ci, hi(−ci)) and (ci, hi(ci)) be the coordinates of
the local minima of hi(x) for i ∈ {1, 2, ..., k}.
We use a pair of fn to construct one function. Fig.2(a)
and (b) show the plots of h1 and h2 respectively.
We can construct a function deﬁned as follows:
SN (x) =
aihi(x) ∀N ∈ {1, ..., k}
N(cid:88)
i=1
˜h(x) = Sk(x)
(7)
(8)
For h1, we set d1 = 0 such that the two troughs are stick
together. For h2, we set d2 > c1 to ensure that there are
four local minima for the function y = S2(x) = a1h1(x) +
a2h2(x) for some constant a1, a2. We keep constructing Si
with i > 2 in a similar way. In general, we have d1 = 0 <
c1 < d2 < c2 < d3 < c3 < ... < dk < ck < 1. Under this
setting, we have 2k troughs for y = Sk(x).
By choosing suitable coefﬁcients {ai}, we can construct
a function with p = 2k local minima, where they have
a same value at y-coordinates. Fig.2(d) shows the plot
of y = S2(x), for the 8 intervals [−1,−c2], [−c2,−d2],
[−d2,−c1], [−c1, 0], [0, c1], [c1, d2], [d2, c2], [c2, 1], there
exists at least one subset of each interval such that these
subsets are mapped onto the same interval by S2.
Now, for the following intervals:
[−1,−ck], [−ck,−dk], [−dk,−ck−1], ...,
[−c1, 0], [0, c1], [c1, d2], ..., [ck−1, dk], [dk, ck], [ck, 1]
(9)
there is a subset of each intervals that is mapped onto the
same interval. Therefore, ˜h identiﬁes 2p = 4k regions in
the input domain.
Since ˜h is the linear combination of h1, ..., hk, we can
treat it as an output of the current layer of the neural net-
work. By considering all the n0 subset, we can conclude
that, ˜h identiﬁes 2n0(cid:98)n1/n0(cid:99)n0 regions in total.
Using the same strategy as [22, 19], we can conclude
that, the maximal number of response regions computed
by the neural network using PoLUs is bounded below by
(cid:4)
2n0(L−1)(cid:16)(cid:81)L−1
(cid:107)n0(cid:17)(cid:80)n0
(cid:106) ni
(cid:0)nL
(cid:1).
i=1
n0
j=0
for
This proof holds
the neural networks with
PoLUs(n > 1) or ELUs(α > 1), as they have intersection
with y = x for negative input. While for the networks with
PoLUs(n ≤ 1), ELUs(α ≤ 1) or ReLUs, the lower bounds
remain the same as in [19]. As the number of response re-
gions of the functions computed by a neural network, is a
measure of ﬂexibility of that network, the networks with
PoLUs(n > 1) and ELUs(α > 1) are considered to be more
ﬂexible.
Note that, even though we prove that the PoLU has more
response regions than ELU does, we cannot simply deter-
mine that any new activation functions which may increase
the number of response regions can have a better perfor-
mance. Because there are many factors that may affect the
performance of a network, like the bias shift effect, value
of the saturation for negative input, etc. Hence, ”the larger
the number of response regions, the better the network is”
is not the ﬁnal conclusion and not the only advantage that
PoLU has.
4. Experiments
In this section, we ﬁrst evaluate the impact of α on ELUs
by setting α to 0.5, 1 and 2 with the ELU-Network on
CIFAR-100 dataset. We then evaluate PoLUs with different
convolutional neural networks using different power values
n ∈ {1, 1.5, 2} on ﬁve benchmark datasets: MNIST [17],
CIFAR-10 [14], CIFAR-100 [14], Street View House Num-
bers [21], and ImageNet [23]. Compared with other state-
of-the-art activation functions, including Exponential Lin-
ear Units (ELUs), and the most widely used activation func-
tion, Rectiﬁed Linear Units (ReLUs), convolutional neural
networks with PoLUs present the best performance on all
four datasets. Several deep neural networks with a different
number of layers are implemented to demonstrate that Po-
LUs are more compatible than ELUs and ReLUs for convo-
lutional neural networks. The experiments are implemented
using deep learning toolbox Keras [2] with tensorﬂow back-
end. Note that, we run experiments with activation func-
tions SReLU and Leaky ReLU as well, obtained similar re-
sults comparable to those reported in the ELU paper (i.e. the
accuracy difference is within 1%). Therefore, to make the
Figure 3. The plots show the results of using simple-ELU-Net on the CIFAR-100 dataset, by using ELU with α ∈ {0.5, 1, 2}. (a-b) The
testing error (c) The plots of ELU under different α. ELU with α = 1 has the best performance among them.
Table 1. This table shows the result for MNIST dataset and SVHN dataset. For SVHN, Simple-ELU-Net and a 4CNN+2NN network are
used for testing. For MNIST, only a 2CNN+2NN is used for testing. We use ReLU, ELU and PoLU(n = 1, 1.5, 2) for both datasets. The
best result for each network is bold.
SVHN
MNIST
4 CNN + 2 NN
simple-ELU-Net
0.69(±0.03)% 4.85(±0.07)%
5.18(±0.09)%
5.16(±0.08)%
4.87(±0.05)%
0.99(±0.02)%
4.84(±0.06)%
0.83(±0.03)%
5.02(±0.08)%
4.96(±0.07)%
0.83(±0.02)%
4.71(±0.05)%
4.63(±0.06)% 4.90(±0.07)%
0.87(±0.02)%
ReLUs
ELUs
PoLUs (n=1)
PoLUs (n=1.5)
PoLUs (n=2)
plots more clear and easier to demonstrate the differences
between ELU, PoLU and the baseline activation function
ReLU, we do not contain the performance of SReLu and
Leaky ReLU in the plots.
4.1. MNIST dataset
The MNIST dataset [17] contains 60,000 training and
10,000 testing samples with 28 × 28 pixel size. Each im-
age is drawn from greyscale handwritten digits 0-9. Since
the MNIST dataset has been well studied in evaluating dif-
ferent neural networks, we utilize this dataset to assess the
performance of PoLUs with a relatively shallow neural net-
work. We train a network with two convolutional layers and
two densely connected layers followed by a softmax layer
which is arranged in stack of ([1× 32× 3], [1× 64× 3], [1×
128×F C], [1×10×Sof tmax]). A 2×2 max-pooling layer
with stride of 2 is applied to the end of the second stack. We
leverage dropout with a ratio 0.5 to regularize the network.
The results are provided in Table 1,and ReLUs achieved the
best results with the testing error equaling to 0.69%.
4.2. CIFAR-10 and CIFAR-100 dataset
The CIFAR-10 and CIFAR-100 [14] datasets are similar.
Both of these two datasets contain 60,000 color images with
32×32 size, which are split into 50,000 training and 10,000
testing samples. The only difference between them is that
CIFAR-10 is drawn from 10 classes while CIFAR-100 con-
tains 100 classes. Therefore, the same neural network struc-
tures followed by different softmax layer are implemented
for both datasets. The neural networks we implemented
are (i) the ELU-Network with 11 convolutional layers from
[4](named simple-ELU-Net), (ii) the ELU-Network with
18 convolutional layers from [4](named ELU-Net), (iii) A
VGG16-structure-like neural network [24], and (iv) Deep
Residual Network (ResNet) with 50-layer structure from
[10]. As mentioned before, we also implement the ELU-
Network with 11 convolutional layers with ELUs assigned
with different α values to evaluate the effect of α and the
relationship between slope and saturation.
The assessment of PoLUs assigned with different power
values n are mainly based on the comparison with ELUs
and ReLUs by utilizing the ELU-Network containing 11
convolutional layers on CIFAR-100 dataset. The relatively
simple ELU-Network is arranged in stacks of ([1 × 192 ×
5], [1× 192× 1, 1× 240× 3], [1× 240× 1, 1× 260× 2], [1×
260× 1, 1× 280× 2], [1× 280× 1, 1× 300× 2], [1× 300×
1], [1× 100× 1]) (in each stack, the ﬁrst number is the num-
ber of layers, the second number represents the number of
ﬁlters and the third number is the size of each ﬁlter). After
each stack (except the last two stacks), a 2× 2 max-pooling
layer with stride of 2 is applied. Followed by the instruction
in [4], the dropout ratio of (0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.0)
Figure 4. These plots are the results of using Simple-ELU-Net and different activation functions (PoLU(n ∈ {1, 1.5, 2}), ELU, ReLU) on
CIFAR-100 dataset. (a)-(c): The training loss; (d)-(f): The testing error. Each curve represents the average of 5 runs. PoLU with n = 2
achieves the best performance.
is applied at the last layer of each stack and the L2-weight
decay regularization is set to 0.0005. Learning rate is initial-
ized at 0.01 and after 70 epochs drop to 0.005. Then learn-
ing rate decays by a factor of 10 every 70 epochs. The total
number of epochs is 300. Stochastic Gradient Descent is
used with momentum set to 0.9. Global contrast normaliza-
tion and ZCA whitening which are mentioned in [8] are also
applied to the dataset. Moreover, the training samples are
randomly cropped into 32 × 32 size with random horizon-
tal ﬂipping images padded with four pixels at all borders.
Each network with different activation function is trained 5
times, and the mean and standard deviation of the testing
errors on CIFAR-10 and CIFAR-100 are shown in Table 2
and 3. Fig.4 presents the comparison of different activa-
tion functions based on the testing error and training loss on
CIFAR-100. The results demonstrate that the PoLUs with
power value n > 1 achieves the best results among the oth-
ers, which also satisfy our prediction. Additionally, training
loss of PoLUs with different power values drops faster than
ReLU and with a comparative speed with ELU.
To evaluate deeper and more complex neural networks
which contain more parameters, we implemented both
layers.
a VGG16-structure-like neural network and the ELU-
Network with 18 convolutional
The VGG16-
structure-like neural work is derived from [24], with the
number of units in the last two densely connected layers
changed to 512 since the size of the input feature maps of
them are 1 × 1 × 512. The structure of the neural network
is arranged in stacks of ([2 × 64 × 3], [2 × 128 × 3], [3 ×
256× 3], [3× 512× 3], [3× 512× 3], [2× 512× F C], [1×
100 × F C]). Max-pooling with size 2 × 2 and stride 2 is
applied after each stack except the last three densely con-
nected layers. The dropout ratio is set to 0.5 for the last two
densely connected layers and the L2-regularization term for
each convolutional layer is set to 0.0005. The learning rate
is initialized to 0.01 and decays by a factor of 10 every 70
epochs. The optimizer for the neural network is SGD with
momentum equals to 0.9. The more sophisticated ELU-
Network is arranged in stacks of ([1 × 384 × 3], [1 × 384 ×
1, 1× 384× 2, 1× 640× 2], [1× 640× 1, 3× 768× 2], [1×
768×1, 2×896×2], [1×896×3, 2×1024×2], [1×1024×
1, 1 × 1152 × 2], [1 × 1152 × 1], [1 × 100 × 1]). Similar to
the simpler ELU-Network mentioned above, there is a 2× 2
max-pooling layer with stride 2 after each stack except the
Table 2. This table shows the result for CIFAR-10 dataset. Different Networks (simple-ELU-Net, ELU-Net, VGG16, ResNet-50) and
activation function (ReLU, ELU, PoLU(n = 1, 1.5, 2)) are used. The best result for each network is bold.
ReLUs
ELUs
PoLUs (n=1)
PoLUs (n=1.5)
PoLUs (n=2)
ResNet-50
VGG16
simple-ELU-Net ELU-Net
9.44(±0.20)%
8.16(±0.11)%
11.73(±0.20)% 8.37(±0.19)%
8.76(±0.17)%
7.46(±0.13)%
9.92(±0.13)%
6.67(±0.11)%
8.64(±0.13)%
7.57(±0.10)%
9.87(±0.11)%
6.68(±0.10)%
7.03(±0.14)% 8.14(±0.13)%
9.03(±0.12)%
5.85(±0.15)%
8.74(±0.11)% 5.45(±0.10)% 7.35(±0.12)%
8.42(±0.14)%
last two stacks. Zero padding is applied before each convo-
lutional layer to keep the dimension unchanged. The initial
dropout ratio, L2-Regularization, momentum value are the
same as the simpler ELU-Network. For both the VGG16-
structure-like network and the sophisticated ELU-Network,
the dataset is preprocessed as described in [8] with global
contrast normalization and ZCA whitening.
Thanks to the success of much deeper neural networks
on image classiﬁcation, the experiments with different ac-
tivation functions should also take deeper neural network
such as Deep Residual Network (ResNet) into consider-
ation. Comparing with the neural networks mentioned
above, ResNet is much deeper and the structure is kind
of different since there is a shortcut connection from each
stack input to the next stack input. As described in [10], this
skip connection structure can efﬁciently solve the vanishing
gradient problem which is described in a previous section.
Another difference is, there is always a batch normalization
layer before each activation function. Batch normalization
can provide the input batch of each stack with zero mean
and unit variance, which will compensate one of the disad-
vantages of ReLUs. Therefore, the difference of the perfor-
mance among ReLUs, ELUs, and PoLUs in ResNet is not
as signiﬁcant, compared with other networks. Such phe-
nomenon is also observed in Table 2 and 3. However, we
implemented ResNet-50 with the last two residual stages
ending up by utilizing a 1×1 convolutional layer with stride
of 2 to downsample the feature maps, thus it will result in
a worse performance than what is described in [10]. The
difference of the test errors of ResNet-50 with ReLUs on
CIFAR-10 dataset is about 3%.
The evaluation of different α of ELUs on CIFAR-100
dataset using ELU-Network with 11 convolutional layers is
presented in Fig.3. The results show that ELUs with α = 1
could achieve a better performance compared with α = 0.5
or α = 2, since the saturation value is too small or too large,
which may push the mean activation away from 0. This is
also the evidence of the disadvantages of ELUs, which we
mentioned in a previous section.
4.3. Street View House Number (SVHN) dataset
The Street View House Number (SVHN) [21] dataset
is collected by Google Street View, focusing on the color
images of house numbers. There are two formats of this
dataset, and the second one was what used in our experi-
ments. In the second format, each image is in the ﬁxed size
with 32 × 32 pixels and most center part of the image is
a digit. There are 73,257 training and 26,032 testing sam-
ples. Additionally, there are also 531,131 extra samples that
can be used as additional training samples. SVHN can be
viewed as similar to MNIST since both datasets are mainly
focused on digits. However, SVHN is harder than MNIST
since images from SVHN are cropped from real world color
images. Moreover, the size of each image is 32a × 32, and
thus neural networks which are designed for CIFAR-10 and
CIFAR-100 can also be implemented for SVHN. We im-
plemented the ELU-Network with 11 convolutional layers
and a relatively shallower neural network which contains
four convolutional layers and one densely connected layer
followed by a softmax layer. The relatively shallow neural
network is arranged in stack of ([1×32×3], [1×32×3], [1×
64× 3], [1× 64× 3].[1× 512× F C], [1× 10× Sof tmax]).
The dataset is preprocessed followed by [26] with local con-
trast normalization. Only training and testing samples are
used, the set of extra samples is not considered. The ﬁnal
performance is shown in Table 1.
4.4. ImageNet
We evaluate PoLU on the ImageNet dataset which con-
tains more than 1.2 million training images belonging to
1000 classes. There are also 50k and 100k images for val-
idation and testing respectively. The network we imple-
mented has the same structure as the one proposed in [4], in
which the 15 layers are now arranged as ([1 × 96 × 6], [3 ×
512× 3], [5× 768× 3], [3× 1024× 3].[2× 4096× F C], [1×
1000 × Sof tmax]). After each stack, a 2 × 2 max-pooling
layer with stride of 2 is applied and spatial pyramid pool-
ing (SPP) with [1,2,4] levels is employed before the ﬁrst FC
layer [9].
In Fig.5, even though the network with ELU has sim-
ilar performance with network with PoLU in the (a) and
(b) plots , we can still observe that, comparing with the net-
work with ELUs, the one with PoLUs not only has a slightly
lower loss at the last several epochs, but also has a better ﬁ-
nal accuracy in plots (c) and (d).
Table 3. This table shows the result for CIFAR-100 dataset. Different Networks (simple-ELU-Net, ELU-Net, VGG16, ResNet-50) and
activation function (ReLU, ELU, PoLU(n = 1, 1.5, 2)) are used. The best result for each network is bold.
ReLUs
ELUs
PoLUs (n=1)
PoLUs (n=1.5)
PoLUs (n=2)
ResNet-50
VGG16
simple-ELU-Net
30.27(±0.31)%
32.87(±0.21)%
33.53(±0.41)%
28.21(±0.29)%
29.29(±0.17)%
29.06(±0.25)%
28.46(±0.27)%
28.90(±0.22)%
29.02(±0.34)%
27.48(±0.23)% 28.01(±0.29)%
27.89(±0.26)%
27.01(±0.21)% 23.07(±0.20)% 28.64(±0.21)%
28.13(±0.30)%
ELU-Net
29.47(±0.31)%
24.88(±0.21)%
24.97(±0.22)%
24.05(±0.23)%
and ReLUs are not so signiﬁcant. In our experiments, we
also implemented power value n > 2. However, due to
too-large a slope at x → 0−, the activation functions are
over sensitive to the input values. PoLUs will map inputs
around 0− with a little difference into larger area and Po-
LUs also reach to saturation faster as the rate of change to-
wards saturation is increased. Moreover, together with the
experiments we implemented with ELUs by setting differ-
ent values of α, we can draw the conclusion that both slope
and saturation cannot be set too large.
For the time complexity of our experiments, as demon-
strated in both Fig. 4 and Fig. 5, similar to ELU, PoLU
can achieve the same training loss or training accuracy with
less epochs compared with ReLU. Therefore, even though
PoLU is more complex than ReLU and it takes about 5%
more training time for each training epoch, the time of
reaching the best accuracy that ReLU can get is still less.
Note that the extra time spent on the calculation of acti-
vation function is only a small portion, comparing to the
total computational time of the network. While training
with same number of epochs, the total training time for
ELU/PoLU network and ReLU network on ImageNet are
12 hours and 11.5 hours respectively.
5. Conclusions
We proposed a new activation function - Power Linear
Unit (PoLU), which uses identity function and power func-
tion to construct its positive and negative sections respec-
tively. Even though the PoLU is along the direction of
the efforts like ELU, which are variants of ReLU, in PoLU
more attention is on the negative part of the activation func-
tion. This was motivated by the observation that not only
the saturation value but also the slope in the negative part
of the activation function can signiﬁcantly affect the perfor-
mance of the network. In contrast, ELU focuses on better
saturation values via using exponential computation. Note
that the saturation value will change if we change the slope.
We have shown that ELU with saturation value 1 performs
best, which implies that the slope cannot be changed if we
want to use this optimal value. The proposed PoLU can
avoid this dilemma: we can achieve the desired saturation
while being able to adjust the slope based on changing the
power parameter n, which means that the negative region of
Figure 5. The plots of the training loss and testing error(%) on
ImageNet. (a) The training loss on the 1 - 250kth iterations; (b)
The testing error(%) on the 1 - 250kth iterations; (c) The training
loss on the 200k -250kth iterations; (d) The testing error(%) on
the 200k - 250kth iterations.
4.5. Discussion on the result
The performance of different neural networks with dif-
ferent activation functions illustrates that the PoLUs and
ELUs are much better than ReLUs in deep neural network
if there are no batch normalization layers, which indicates
that PoLUs and ELUs overcome the bias shift problem and
push the input’s mean to zero from the other side. However,
the result on MNIST dataset shows that ReLU work better
than ELU and PoLU with n = 1, 1.5, 2, which suggests that
the bias shift effect may have less inﬂuence in shallow neu-
ral networks. Another observation from the comparison of
the ELU-Network and the VGG16-structure-like network
on CIFAR-100 dataset is that, if the network consists of all
convolutional layers, like the ELU-Network, the PoLUs and
ELUs, which contain negative part, it will perform much
better than ReLUs, while if there are densely connected lay-
ers, the difference in performance between PoLUs, ELUs
Advances in neural information processing systems, pages
1097–1105, 2012. 1
[16] Y. Le Cun, I. Kanter, and S. A. Solla. Eigenvalues of co-
variance matrices: Application to neural-network learning.
Physical Review Letters, 66(18):2396, 1991. 2
[17] Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner. Gradient-
based learning applied to document recognition. Proceed-
ings of the IEEE, 86(11):2278–2324, 1998. 4, 5
[18] A. L. Maas, A. Y. Hannun, and A. Y. Ng. Rectiﬁer nonlin-
In Proc.
earities improve neural network acoustic models.
ICML, volume 30, 2013. 2
[19] G. F. Montufar, R. Pascanu, K. Cho, and Y. Bengio. On
the number of linear regions of deep neural networks.
In
Advances in neural information processing systems, pages
2924–2932, 2014. 1, 3, 4
[20] V. Nair and G. E. Hinton. Rectiﬁed linear units improve
restricted boltzmann machines. In Proceedings of the 27th
international conference on machine learning (ICML-10),
pages 807–814, 2010. 2
[21] Y. Netzer, T. Wang, A. Coates, A. Bissacco, B. Wu, and A. Y.
Ng. Reading digits in natural images with unsupervised fea-
ture learning. In NIPS workshop on deep learning and un-
supervised feature learning, volume 2011, page 5, 2011. 4,
[22] R. Pascanu, G. Mont´ufar, and Y. Bengio. On the number of
inference regions of deep feed forward networks with piece-
wise linear activations. CoRR, abs/1312.6098, 2013. 1, 3,
[23] O. Russakovsky, J. Deng, H. Su, J. Krause, S. Satheesh,
S. Ma, Z. Huang, A. Karpathy, A. Khosla, M. Bernstein,
A. C. Berg, and L. Fei-Fei.
ImageNet Large Scale Visual
Recognition Challenge. International Journal of Computer
Vision (IJCV), 115(3):211–252, 2015. 4
[24] K. Simonyan and A. Zisserman.
Very deep convolu-
tional networks for large-scale image recognition. CoRR,
abs/1409.1556, 2014. 5, 6
[25] B. Xu, N. Wang, T. Chen, and M. Li. Empirical evaluation of
rectiﬁed activations in convolutional network. arXiv preprint
arXiv:1505.00853, 2015. 2
[26] M. D. Zeiler and R. Fergus. Stochastic pooling for regular-
ization of deep convolutional neural networks. arXiv preprint
arXiv:1301.3557, 2013. 7
PoLU can intersect y = x while keeping the same asymp-
tote for the saturation by means of setting n > 1. We also
demonstrated the advantage of having a proper slope in the
negative part of the activation function, that networks using
PoLU may have a larger number of response regions, which
helps to improve the nonlinearity capacity of the neural net-
work. Experimental results showed that PoLU outperforms
other state-of-the-art on most networks.
References
[1] M. Anthony and P. L. Bartlett. Neural network learning:
Theoretical foundations. cambridge university press, 2009.
[2] F. Chollet et al.
Keras.
fchollet/keras, 2015. 4
https://github.com/
[3] D. Ciregan, U. Meier, and J. Schmidhuber. Multi-column
deep neural networks for image classiﬁcation. In Computer
Vision and Pattern Recognition (CVPR), 2012 IEEE Confer-
ence on, pages 3642–3649. IEEE, 2012. 1
[4] D.-A. Clevert, T. Unterthiner, and S. Hochreiter. Fast and
accurate deep network learning by exponential linear units
(elus). arXiv preprint arXiv:1511.07289, 2015. 2, 3, 5, 6, 7
[5] G. Cybenko. Approximation by superpositions of a sig-
moidal function. Mathematics of Control, Signals, and Sys-
tems (MCSS), 2(4):303–314, 1989. 1
[6] O. Delalleau and Y. Bengio. Shallow vs. deep sum-product
In Advances in Neural Information Processing
networks.
Systems, pages 666–674, 2011. 1
[7] X. Glorot, A. Bordes, and Y. Bengio. Deep sparse rectiﬁer
neural networks. In Aistats, volume 15, page 275, 2011. 1, 2
[8] I. J. Goodfellow, D. Warde-Farley, M. Mirza, A. Courville,
arXiv preprint
and Y. Bengio. Maxout networks.
arXiv:1302.4389, 2013. 6, 7
[9] K. He, X. Zhang, S. Ren, and J. Sun. Delving deep into
rectiﬁers: Surpassing human-level performance on imagenet
classiﬁcation. CoRR, abs/1502.01852, 2015. 2, 7
[10] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learn-
ing for image recognition. In Proceedings of the IEEE Con-
ference on Computer Vision and Pattern Recognition, pages
770–778, 2016. 5, 7
[11] G. Hinton, L. Deng, D. Yu, G. E. Dahl, A.-r. Mohamed,
N. Jaitly, A. Senior, V. Vanhoucke, P. Nguyen, T. N. Sainath,
et al. Deep neural networks for acoustic modeling in speech
recognition: The shared views of four research groups. IEEE
Signal Processing Magazine, 29(6):82–97, 2012. 1
[12] S. Hochreiter. The vanishing gradient problem during learn-
Interna-
ing recurrent neural nets and problem solutions.
tional Journal of Uncertainty, Fuzziness and Knowledge-
Based Systems, 6(02):107–116, 1998. 2
[13] K. Hornik, M. Stinchcombe, and H. White. Multilayer feed-
forward networks are universal approximators. Neural net-
works, 2(5):359–366, 1989. 1
[14] A. Krizhevsky and G. Hinton. Learning multiple layers of
features from tiny images. 2009. 4, 5
[15] A. Krizhevsky, I. Sutskever, and G. E. Hinton.
classiﬁcation with deep convolutional neural networks.
Imagenet
In


Clustering is inherently subjective [Caruana et al., 2006;
von Luxburg et al., 2014]: a single dataset can often be clus-
tered in multiple ways, and different users may prefer differ-
ent clusterings. This subjectivity is one of the motivations for
constraint-based (or semi-supervised) clustering [Wagstaff et
al., 2001; Bilenko et al., 2004]. Methods in this setting ex-
ploit background knowledge to obtain clusterings that are
more aligned with the user’s preferences. Often, this knowl-
edge is given in the form of pairwise constraints that indicate
whether two instances should be in the same cluster (a must-
link constraint) or not (a cannot-link constraint) [Wagstaff et
al., 2001]. In traditional constraint-based clustering systems
the set of constraints is assumed to be given a priori, and
in practice, the pairs that are queried are often selected ran-
domly. In contrast, in active clustering [Basu et al., 2004a;
Mallapragada et al., 2008; Xiong et al., 2014] it is the method
itself that decides which pairs to query. Typically, active
methods query pairs that are more informative than random
ones, which improves clustering quality.
This work introduces an active constraint-based clustering
method named Constraint-Based Repeated Aggregation (CO-
BRA). It differs from existing approaches in several ways.
First, it aims to maximally exploit constraint transitivity and
entailment [Wagstaff et al., 2001], two properties that allow
deriving additional constraints from a given set of constraints.
By doing this, the actual number of pairwise constraints that
COBRA works with is typically much larger than the num-
ber of pairwise constraints that are queried from the user.
Secondly, COBRA introduces the assumption that there ex-
ist small local regions in the data that are grouped together in
all potential clusterings. To clarify this, consider the exam-
ple of clustering images of people taking different poses (e.g.
facing left or right). There are at least two natural cluster-
ing targets for this data: one might want to cluster based on
identity or pose. In an appropriate feature space, one expects
images that agree on both criteria (i.e. of a single person, tak-
ing a single pose) to be close. There is no need to consider
all of these instances individually, as they will end up in the
same cluster for each of the two targets that the user might
be interested in. COBRA aims to group such instances into
a super-instance, such that they can be treated jointly in the
clustering process. Doing so substantially reduces the num-
ber of pairwise queries. Thirdly, COBRA is an inherently ac-
tive method: the constraints are selected during the execution
of the algorithm itself, as constraint selection and algorithm
execution are intertwined.
In contrast, existing approaches
consist of a component that selects constraints and another
one that uses them during clustering.
Our experiments show that COBRA outperforms state-of-
the-art active clustering methods in terms of both clustering
quality and runtime. Furthermore, it has the distinct advan-
tage that it does not require knowing the number of clusters
beforehand, as the competitors do.
In many realistic clus-
tering scenarios this number is not known, and running an
algorithm with the wrong number of clusters often results in
a signiﬁcant decrease in clustering quality.
We discuss related work on (active) constraint-based clus-
tering in section 2. In section 3 we elaborate the key ideas in
COBRA and describe the method in more detail. We present
our experimental evaluation in section 4, and conclude in sec-
tion 5.
2 Background and Related Work
Most existing constraint-based methods are extensions of
well-known unsupervised clustering algorithms. They use
the constraints either in an adapted clustering procedure
[Wagstaff et al., 2001; Rangapuram and Hein, 2012; Wang
et al., 2014], to learn a similarity metric [Xing et al., 2003;
Davis et al., 2007], or both [Bilenko et al., 2004; Basu et al.,
2004b]. Constraint-based extensions have been developed for
most clustering algorithms, including K-means [Wagstaff et
al., 2001; Bilenko et al., 2004], spectral clustering [Rangapu-
ram and Hein, 2012; Wang et al., 2014], DBSCAN [Lelis and
Sander, 2009; Campello et al., 2013] and EM [Shental et al.,
2004].
Basu et al. [2004a] introduce a strategy to select the most
informative constraints, prior to performing a single run of
a constraint-based clustering algorithm. They show that ac-
tive constraint selection can improve clustering performance.
Several selection strategies have been proposed since [Mal-
lapragada et al., 2008; Xu et al., 2005; Xiong et al., 2014],
most of which are based on the classic approach of uncer-
tainty sampling. As COBRA also chooses which pairs to
query, we consider it to be an active method, and in our ex-
periments we compare to other methods in this setting. Note,
however, that COBRA is quite different from existing meth-
ods in active constrained clustering and active learning in
general. For COBRA, selecting which pairs to query is inher-
ent to the clustering procedure, whereas for most other meth-
ods the selection strategy is optional and considered to be a
separate component.
In its core, COBRA is related to hierarchical clustering as
it follows the same procedure of sequentially trying to merge
the two closest clusters. Constraints have been used in hier-
archical clustering before but in different ways. Davidson et
al. [2009], for example, present an algorithm to ﬁnd a cluster-
ing hierarchy that is consistent with a given set of constraints.
Nogueira et al. [2012] propose an active semi-supervised hi-
erarchical clustering algorithm that is based on merge con-
ﬁdence. Also related to ours is the work of Campello et
al. [2013], who have developed a framework to extract from
a given hierarchy a ﬂat clustering that is consistent with a
given set of constraints. The key difference is that COBRA
starts from super-instances, i.e. small clusters produced by K-
means, and that each merging decision is settled by a pairwise
constraint.
The idea of working with a small number of representatives
(in our case the super-instance medoids, as will be discussed
in section 3) instead of all individual instances has been used
before, but for very different purposes. For example, Yan et
al. [2009] use it to speed up unsupervised spectral clustering,
whereas we use it to reduce the number of pairwise queries.
3 Constraint-Based Repeated Aggregation
Constraint-based clustering algorithms aim to produce a clus-
tering of a dataset that resembles an unknown target cluster-
ing Y as close as possible. The algorithm cannot query the
cluster labels in Y directly, but can query the relation between
pairs of instances. A must-link constraint is obtained if the
instances have the same cluster label in Y , a cannot-link con-
straint otherwise. The aim is to produce a clustering that is
close to the target clustering Y , using as few pairwise queries
as possible.
Several strategies can be used to exploit constraints in clus-
tering. Figure 1 illustrates some of them. The most naive
strategy is to query all pairwise relations, and construct clus-
ters as sets of instances that are connected by a must-link con-
straint (Figure 1a). Though this is clearly not a good strategy
in any scenario, it allows us to formulate a baseline for further
improvements. It always results in a perfect clustering, but at
a very high cost: for a dataset of N instances,(cid:0)N
(cid:1) questions
are asked.
The previous strategy can be improved by exploiting con-
straint transitivity and entailment, two well known prop-
erties in constraint-based clustering [Wagstaff et al., 2001;
Bilenko et al., 2004]. Must-link constraints are known to be
transitive:
must-link(A, B) ∧ must-link(B, C) ⇒
must-link(A, C),
whereas cannot-link constraints have an entailment property:
must-link(A, B) ∧ cannot-link(B, C) ⇒
cannot-link(A, C).
Thus, every time a constraint is queried and added to the set of
constraints, transitivity and entailment can be applied to ex-
pand the set. This strategy is illustrated in Figure 1b. Exploit-
ing transitivity and entailment signiﬁcantly reduces the num-
ber of pairwise queries needed to obtain a clustering, without
a loss in clustering quality.
The order in which constraints are queried strongly inﬂu-
ences the number of constraints that can be derived. In gen-
eral, it is better to obtain must-link constraints early on. That
way, any future query involving one of the instances con-
nected by a must-link also applies to all others. This suggests
querying the closest pairs ﬁrst, as they are more likely to be-
long to the same cluster and hence be connected by a must-
link constraint. This is strategy is illustrated in Figure 1c.
The previous strategies all obtain a perfect clustering, but
require a high number of queries which makes them inap-
plicable for reasonably sized datasets. To further reduce the
number of queries, COBRA groups similar instances into
super-instances and only clusters their representatives, i.e.
medoids. It assumes that all instances within a super-instance
are connected by a must-link constraint. While clustering the
medoids, COBRA uses both previously discussed strategies
of querying the closest pairs and exploiting transitivity and
entailment. This strategy, illustrated in Figure 1d, results
in a substantial reduction of the number of queries. It does
not always result in a perfect clustering as it is possible that
the instances within a particular super-instance should not be
grouped together w.r.t. the target clustering.
Table 1 illustrates to what extent each of the improvements
described above reduces the number of queries. We perform
an extensive evaluation of the quality of the clusterings that
COBRA produces in section 4.
3.1 Algorithmic Description
After presenting the main motivations for each step of CO-
BRA, we now give a more detailed description in Algorithm
(a)
(b)
(c)
(d)
Figure 1: Illustration of different querying strategies. Colors indicate the desired clustering. Solid green lines indicate must-link, red ones
cannot-link constraints. Dashed lines indicate derived constraints with the same color code. The number next to the solid line indicates the
ordering of queried constraints, whereas the number next to the dashed line indicates the constraint number from which the constraint was
derived. (a) Querying all 10 constraints (b) Exploiting entailment and transitivity results in querying 6 constraints. (c) Querying the closest
pairs ﬁrst results in 4 constraints. (d) Introducing super-instances (dashed ellipses) results in only 2 queries.
dataset
# instances
total # pairs
# queries
# queries
# queries
iris
wine
dermatology
hepatitis
ecoli
opdigits389
147
178
358
112
336
1151
10731
15753
63903
6216
56280
661825
transitivity
−−−−−→
entailment
409
457
1660
173
1343
3380
closest pairs
−−−−−−→
ﬁrst
super−−−−→
instances
155
187
379
140
440
1164
34
35
42
39
51
54
Table 1: This table shows the total number of pairwise relations in several datasets (column 3), as well the number of pairwise queries that
is required when exploiting transitivity and entailment (column 4, these numbers are averages of runs for 5 random orderings of pairwise
queries), and additionally querying the closest pairs ﬁrst (column 5). The last column shows the number of pairwise queries (averaged over 5
runs) when COBRA is run with 25 super-instances.
(cid:83)
disjoint subsets {C1, . . . ,CNC} of S ((cid:83)
i=1, xi ∈ Rm the instances to be clus-
1. Let X = {xi}N
tered. The set of instances X is ﬁrst over-clustered into NS
disjoint subsets, namely super-instances {Si}NS
i=1 , such that
i Si = X . This over-clustering is obtained by running K-
means with a K that may be signiﬁcantly larger than the ac-
tual number of clusters. Each super-instance Si is represented
by its medoid si, forming a set of super-instance representa-
tives S = {s1, . . . , sNS}. All pairwise queries that are per-
formed are between these super-instance representatives. The
goal of COBRA is now to cluster these representatives into
Each cluster Ci is a set of super-instance representatives,
but conceptually contains all the points in the corresponding
super-instances. The number of clusters NC is unknown a
priori and will be determined during the clustering procedure.
Initially, there are NS clusters, each containing a single super-
instance representative, as shown on line 2 in Algorithm 1.
These clusters are merged (if necessary) in the subsequent
while loop.
i Ci = S).
In each iteration, COBRA ﬁrst sorts all pairs of clusters
between which there is no cannot-link constraint (line 6). The
distance between clusters, by which the pairs are sorted, is
deﬁned as follows (as in single-linkage clustering):
d(C1,C2) =
min
s1∈C1,s2∈C2
(cid:107)s1 − s2(cid:107)2
(1)
Next, COBRA loops over the pairs of clusters and checks
whether they should be merged. It starts by selecting the clos-
est pair of super-instance representatives of the clusters (line
9), and asks whether they should be in the same cluster (line
10). If this is the case, the clusters are merged (lines 11 and
12), and the while-loop is restarted (as the set of clusters is
changed). If that is not the case, the pair of representatives is
added to the set of cannot-link constraints (line 16), and the
inner loop continues by inspecting the next pair of clusters.
The execution stops when all clusters are complete and no
merge is to be done anymore.
Number of Super-instances and Number of Queries
The exact number of queries COBRA needs depends on the
extent to which querying the closest pairs ﬁrst leads to must-
link constraints and on the actual number of clusters. It is
thus difﬁcult to determine it before the execution. However,
an estimate in terms of a lower and upper bound can be posed:
with NS the number of super-instances, and NC the number
of clusters in the target clustering.
In the worst case, CO-
BRA will need to query all pairwise relations between super-
NS − NC +(cid:0)NC
instances, which requires(cid:0)NS
tice, COBRA typically needs much less than(cid:0)NS
BRA needs exactly NS−NC +(cid:0)NC
into the NC clusters, followed by an additional(cid:0)NC
(cid:1) (cid:46) # queries ≤(cid:0)NS
(cid:1) queries. This happens if there
(cid:1) queries. If
(cid:1) queries. NS−NC must-
(cid:1) queries
(i) super-instances are perfectly homogeneous w.r.t. the tar-
get clustering and (ii) the distances between must-link pairs
are smaller than the distances between cannot-link pairs, CO-
link constraints are needed to merge the NS super-instances
is a cannot-link between each pair of super-instances. In prac-
to ensure nothing can be merged anymore. This formula is in-
applicable in practice as the number of clusters is not known
(cid:1)
Algorithm 1 COBRA
Require: X : a dataset,
NS: the number of super-instances,
i=1 = K-means(X , NS)
Ensure: C, a clustering of D
1: {Si}NS
2: ∀i = 1, . . . , NS : Ci = {si}
3: CL = ∅
4: mergeHappened = T rue
5: while mergeHappened do
6:
P = {C1,C2 : (cid:64)x ∈ C1, y ∈ C2 : (x, y) ∈ CL},
ordered by d(C1,C2)
for C1,C2 in P do
sa, sb = arg mins1∈C1,s2∈C2(cid:107)s1 − s2(cid:107)2
if must-link(sa, sb) then
7: mergeHappened = F alse
8:
9:
10:
11:
12:
13:
14:
15:
16:
end if
17:
end for
18:
19: end while
20: return C
C1 = C1 ∪ C2
C = C \ {C2}
mergeHappened = T rue
break
CL = CL ∪ {(sa, sb})
else
beforehand, and thus serves as a means to understand the
number of queries that might be needed. Figure 2 compares
this lower bound to the actual number of queries that was
needed by COBRA for 21 clustering tasks (these will be de-
scribed in more detail in section 4). For most tasks, the actual
number of pairwise queries is relatively close to the lower
bound. It is possible to get a smaller number of queries than
that suggested by the lower bound: this happens if a single
super-instance contains the instances of two actual clusters,
(cid:1) factor inaccurate.
rendering the(cid:0)NC
Figure 2: The estimated lower bound on the number of queries vs.
the number of queries needed by COBRA (averaged over 5 CV
folds). Each dot corresponds to one of the 21 clustering tasks.
4 Experimental Evaluation
In this section, we discuss the experimental evaluation of CO-
BRA.
Existing Constraint-based Algorithms
We compare COBRA to the following state-of-the-art
constraint-based clustering algorithms:
• MPCKMeans [Bilenko et al., 2004]
is a hybrid
constraint-based extension of K-means:
it uses metric
learning and an adapted clustering procedure combining
the within-cluster sum of squares with the cost of violat-
ing constraints in the objective. We use the implementa-
tion that is available in the WekaUT package1.
• Constrained Spectral Clustering (COSC) [Rangapuram
and Hein, 2012] is based on spectral clustering, but opti-
mizes for a modiﬁed objective that also takes constraint
violation into account. We use the code provided by the
authors on their web page2.
It is important to note that, in contrast to COBRA, COSC
and MPCKMeans require the number of clusters as an input
parameter. In our experiments, the true number of clusters
is provided to these algorithms. In many clustering applica-
tions, however, this number is typically not known before-
hand. Thus, COSC and MPCKMeans are at an advantage.
Active Selection Strategies
Each of these algorithms is combined with the following two
active selection strategies:
• MinMax [Mallapragada et al., 2008] starts with an ex-
ploration phase in which K (the number of clusters,
assumed to be known in advance) neighborhoods with
cannot-links between them are sought.
In the subse-
quent consolidation phase these neighborhoods are ex-
panded by selecting the most uncertain instances and de-
termining their neighborhood membership by means of
pairwise constraints. We set the width parameter of the
Gaussian kernel to the 20th percentile of the distribution
of pairwise Euclidean distances, as in [Mallapragada et
al., 2008].
• NPU [Xiong et al., 2014] is also based on the concept
of neighborhoods, but in contrast to MinMax it is an it-
erative method: the data is clustered multiple times, and
each clustering is used to determine the next set of pairs
to query. Xiong et al. [2014] show that NPU typically
outperforms MinMax in terms of clustering quality, at
the cost of increased runtime.
Datasets
We experiment with 15 UCI datasets:
iris, wine, der-
matology, hepatitis, glass, ionosphere, optdigits389, ecoli,
breast-cancer-wisconsin, segmentation, column 2C, parkin-
sons, spambase, sonar and yeast. Most of these datasets
have been used in earlier work on constraint-based cluster-
ing [Bilenko et al., 2004; Xiong et al., 2014]. Optdigits389
contains digits 3, 8 and 9 of the UCI handwritten digits data
1http://www.cs.utexas.edu/users/ml/risc/code/
2http://www.ml.uni-saarland.de/code/cosc/cosc.htm
050100150200250300approximate lower bound on # queries050100150200250300# queries25 super-instances50 super-instances100 super-instancesTable 2: Wins and losses aggregated over all 21 clustering tasks. After each win (loss) count, we report the average margin by which COBRA
wins (loses). For win counts marked with an asterisk, the differences are signiﬁcant according to the Wilcoxon test with p < 0.05.
COBRA vs. MPCKM-MinMax
COBRA vs. MPCKM-NPU
COBRA vs. COSC-MinMax
COBRA vs. COSC-NPU
25 super-instances
win
loss
50 super-instances
loss
win
100 super-instances
loss
win
13 (0.14)
11 (0.16)
15* (0.21)
15* (0.20)
8 (0.12)
10 (0.11)
6 (0.05)
6 (0.04)
13 (0.16)
17* (0.12)
16* (0.21)
14* (0.23)
8 (0.09)
4 (0.09)
5 (0.06)
7 (0.04)
12 (0.19)
12 (0.17)
14* (0.21)
13* (0.23)
9 (0.05)
9 (0.06)
7 (0.04)
8 (0.03)
[Bilenko et al., 2004; Mallapragada et al., 2008]. Duplicate
instances were removed for all these datasets, and all data
was normalized between 0 and 1. We also perform exper-
iments on the CMU faces dataset, which contains 624 im-
ages of 20 persons taking different poses, with different ex-
pressions, with and without sunglasses. Hence, this dataset
has 4 target clusterings: identity, pose, expression and sun-
glasses. We extract a 2048-value feature vector for each im-
age by running it through the pre-trained Inception-V3 net-
work [Szegedy et al., 2015] and storing the output of the
second last layer. Finally, we also cluster the 20 news-
groups text data. For this dataset, we consider two tasks:
clustering documents from 3 newsgroups on related topics
(the target clusters are comp.graphics, comp.os.ms-windows
and comp.windows.x, as in [Basu et al., 2004a; Mallapra-
gada et al., 2008]), and clustering documents from 3 news-
groups on very different topics (alt.atheism, rec.sport.baseball
and sci.space, as in [Basu et al., 2004a; Mallapragada et al.,
2008]). We ﬁrst extract tf-idf features, and next apply latent
semantic indexing (as in [Mallapragada et al., 2008]) to re-
duce the dimensionality to 10. This brings the total to 17
datasets, for which 21 clustering tasks are deﬁned (15 UCI
datasets with a single target, CMU faces with 4 targets, and 2
subsets of the 20 newsgroups data).
Experimental Methodology
We use a cross-validation procedure that is highly similar to
the ones used in e.g. [Basu et al., 2004a] and [Mallapragada
et al., 2008].
In each of 5 folds, 20% of the instances are
set aside as the test set. The clustering algorithm is then run
on the entire dataset, but can only query pairwise constraints
for which both instances are in the training set. To evaluate
the quality of the resulting clustering, we compute the Ad-
justed Rand index (ARI, [Hubert and Arabie, 1985]) only on
the instances in the test set. The ARI measures the similarity
between two clusterings, in this case between the one pro-
duced by the constraint-based clustering algorithm and the
one indicated by the class labels. An ARI of 0 means that
the clustering is not better than random, 1 indicates a perfect
clustering. The ﬁnal score for an algorithm for a particular
dataset is computed as the average ARI over the 5 folds.
The exact number of pairwise queries is not known before-
hand for COBRA, but more super-instances generally results
in more queries. To evaluate COBRA with varying amounts
of user input, we run it with 25, 50 and 100 super-instances.
For each fold, we execute the following steps:
• Run COBRA and count how many constraints it needs.
• Run the competitors with the same number of con-
• Evaluate the resulting clusterings by computing the ARI
straints.
on the test set.
To make sure that COBRA only queries pairs of which both
instances are in the training set,
the medoid of a super-
instance is calculated based on only the training instances
in that super-instance (and as such, test instances are never
queried during clustering).
In the rare event that a super-
instance contains only test instances, it is merged with the
nearest super-instance that does contain training instances.
For the MinMax and NPU selection strategies, pairs involv-
ing an instance from the test set are simply excluded from
selection.
Results
The results over all 21 clustering tasks are summarized in Ta-
bles 2 and 3. Table 2 reports wins and losses against each
of the 4 competitors.
It shows that COBRA tends to pro-
duce better clusterings than its competitors. The difference
with COSC is signiﬁcant according to the Wilcoxon test with
p < 0.05, whereas the difference with MPCKMeans is not.
Table 3 shows the average ranks for COBRA and its competi-
tors. The Friedman aligned rank test [Hodges and Lehmann,
1962], which has more power than the Friedman test when
the number of algorithms under comparison is low [Garca et
al., 2010], indicates that for 50 and 100 super-instances, the
differences in rank between COBRA and all competitors are
signiﬁcant, using a posthoc Holm test with p < 0.05.
Table 3: For each dataset, all algorithms are ranked from 1 (best)
to 5 (worst). This table shows the average ranks for 25, 50 and 100
super-instances. Algorithms for which the difference with COBRA
is signiﬁcant according to the Friedman aligned rank test and a post-
hoc Holm test with p < 0.05 are marked with an asterisk.
25 super-instances
50 super-instances
100 super-instances
COBRA
MPCK-NPU
MPCK-MM
COSC-MM*
COSC-NPU*
COBRA
2.43
MPCK-MM*
3.00
COSC-NPU*
3.07
3.12
COSC-MM*
3.40 MPCK-NPU*
COBRA
2.14
3.00
COSC-NPU*
3.02 MPCK-NPU*
MPCK-MM*
3.26
3.57
COSC-MM*
2.52
2.98
3.00
3.19
3.31
Running Competitors with Different Numbers of Queries
In the previous experiments, the competitors are run with
the same number of queries that COBRA required, as for
COBRA this cannot be ﬁxed beforehand. One might won-
der whether this constitutes an advantage for COBRA, and
whether the above conclusions also hold when competitors
(a)
(b)
(c)
(d)
Figure 3: Comparing the clustering qualities for COBRA and its competitors for a wider range of numbers of constraints. For COBRA, each
black marker shows the average number of questions that COBRA required for a particular number of super-instances, and its average ARI
(over 5-fold CV). We only show the results for the MinMax selection strategy, but the conclusions that are drawn also hold for NPU. The
number of super-instances for COBRA is 25, 50, 100 (as in the experiments before), 150, 200, 250, . . .
can be run with different numbers of constraints. To answer
this question, we run COBRA with a wider range of super-
instances, and its competitors with more numbers of con-
straints. Figure 3 shows the results for 4 datasets, but the con-
clusions that are drawn here also hold for the others. A ﬁrst
conclusion is that for the datasets for which COBRA outper-
forms its competitors in the experiments discussed above, it
also does so for larger numbers of constraints (e.g. in Figures
3a and 3b). As such, the results discussed in the previous sec-
tion are representative. Secondly, clustering quality quickly
plateaus for many datasets (e.g. in Figure 3d) . This is espe-
cially true for MPCKMeans, which can be explained by its
strong spherical bias. In contrast, for several datasets both
COBRA and COSC produce increasingly better clusterings
as more constraints are given (e.g. in Figures 3a and 3c).
Selecting the Right Number of Clusters
COBRA does not require specifying the number of clusters
K beforehand. Most often, it produces the correct K (i.e. the
one indicated by the class labels). When it does not, the K it
ﬁnds is very close to the correct one. In contrast, COSC and
MPCKMeans do require specifying K. In the experiments
discussed above, both of them were given the correct K. We
have found experimentally that, in the majority of cases, run-
ning them with a different K reduces clustering quality, and
often by a signiﬁcant amount. Occasionally a different K
improves results, but when this was the case it was typically
only by a small margin. These results are omitted from the
paper due to lack of space.
Runtime
Figure 4 compares the runtimes of COBRA to those of the
competitors. COBRA consists of two steps: constructing
super-instances, and grouping them together to form clusters.
Both are fast, as K-means is used for the ﬁrst step and the sec-
ond step is only applied to the small set of super-instances.
As can be seen in Figure 4, the runtimes of MPCKMeans-
MinMax are comparable to those of COBRA, which is not
surprising as it is built on K-means.
In contrast, COSC-
MinMax is signiﬁcantly more expensive, as it is built on spec-
tral clustering. When used with the NPU selection strategy,
both MPCKMeans and COSC become much slower, as NPU
requires several runs of the clustering algorithm.
Figure 4: Each dot shows the runtime (averaged over 5 CV folds)
of a method on one of the datasets. This ﬁgure shows the results for
COBRA with 50 super-instances, the ﬁgures for 25 and 100 super-
instances are comparable. COBRA and MPCKMeans-MinMax are
highly scalable and always ﬁnish in under 10 seconds.
5 Conclusion
We have introduced COBRA, an active constraint-based clus-
tering method. Unlike other methods, it is not built as an ex-
tension of an existing unsupervised algorithm. Instead, CO-
BRA is inherently constraint-based. With its selection strat-
egy, it aims to maximally exploit constraint transitivity and
entailment. Our experiments show that COBRA outperforms
the state of the art in terms of clustering quality and runtime,
even when the other methods have the advantage of being
given the right number of clusters. In future work, we will
investigate whether an appropriate number of super-instances
can be determined automatically, e.g. by incrementally reﬁn-
ing them when necessary.
Acknowledgements
Toon Van Craenendonck is supported by the Agency for In-
novation by Science and Technology in Flanders (IWT). Se-
bastijan Dumanˇci´c is supported by Research Fund KU Leu-
ven (GOA/13/010).
References
[Basu et al., 2004a] Sugato Basu, Arindam Banerjee, and
Raymond J. Mooney. Active semi-supervision for pair-
In Proceedings of the 2004
wise constrained clustering.
100200300400500600700800# queries0.00.20.40.60.81.0ARIsegmentationMPCKMeans-MinMaxCOSC-MinMaxCOBRA50100150200250300350400# queries0.00.20.40.60.81.0ARIglassMPCKMeans-MinMaxCOSC-MinMaxCOBRA50100150200250300350400# queries0.00.20.40.60.81.0ARIfaces eyesMPCKMeans-MinMaxCOSC-MinMaxCOBRA50100150200250300# queries0.00.20.40.60.81.0ARIbreast-cancer-wisconsinMPCKMeans-MinMaxCOSC-MinMaxCOBRAdatasets10-1100101102103104105runtime (s)MPCKMeans-MinMaxMPCKMeans-NPUCOSC-MinMaxCOSC-NPUCOBRASIAM International Conference on Data Mining (SDM-
04), April 2004.
cal Clustering Using Conﬁdence-Based Active Learning.
(1):139–153, 2012.
[Rangapuram and Hein, 2012] Syama S. Rangapuram and
Matthias Hein. Constrained 1-spectral clustering. In Proc.
of the 15th International Conference on Artiﬁcial Intelli-
gence and Statistics, 2012.
[Shental et al., 2004] Noam Shental, Aharon Bar-Hillel,
Tomer Hertz, and Daphna Weinshall. Computing Gaussian
mixture models with EM using equivalence constraints. In
In Advances in Neural Information Processing Systems 16,
2004.
[Szegedy et al., 2015] Christian Szegedy, Vincent Van-
houcke, Sergey Ioffe, Jonathon Shlens, and Zbigniew
Wojna. Rethinking the inception architecture for computer
vision. CoRR, abs/1512.00567, 2015.
[von Luxburg et al., 2014] Ulrike von Luxburg, Robert C.
Williamson, and Isabelle Guyon. Clustering: Science or
Art? In Workshop on Unsupervised Learning and Trans-
fer Learning, JMLR Workshop and Conference Proceed-
ings 27, 2014.
[Wagstaff et al., 2001] Kiri Wagstaff, Claire Cardie, Seth
Rogers, and Stefan Schroedl. Constrained K-means Clus-
tering with Background Knowledge. In Proc. of the Eigh-
teenth International Conference on Machine Learning,
pages 577–584, 2001.
[Wang et al., 2014] Xiang Wang, Buyue Qian, and Ian
Davidson. On constrained spectral clustering and its appli-
cations. Data Mining and Knowledge Discovery, 28(1):1–
30, 2014.
[Xing et al., 2003] Eric P. Xing, Andrew Y. Ng, Michael I.
Jordan, and Stuart Russell. Distance metric learning,
with application to clustering with side-information.
In
Advances in Neural Information Processing Systems 15,
pages 505–512, 2003.
[Xiong et al., 2014] Sicheng Xiong, Javad Azimi, and Xi-
aoli Z. Fern. Active learning of constraints for semi-
supervised clustering. IEEE Transactions on Knowledge
and Data Engineering, 26(1):43–54, 2014.
[Xu et al., 2005] Qianjun Xu, Marie desJardins, and Kiri L.
Wagstaff. Active Constrained Clustering by Examining
Spectral Eigenvectors, pages 294–307. Springer Berlin
Heidelberg, Berlin, Heidelberg, 2005.
[Yan et al., 2009] Donghui Yan, Ling Huang, and Michael I.
In Pro-
Jordan. Fast approximate spectral clustering.
ceedings of the 15th ACM SIGKDD International Con-
ference on Knowledge Discovery and Data Mining, KDD
’09, pages 907–916, New York, NY, USA, 2009. ACM.
[Basu et al., 2004b] Sugato Basu, Misha Bilenko, and Ray-
mond J. Mooney. A probabilistic framework for semi-
In Proceedings of the 10th ACM
supervised clustering.
SIGKDD International Conference on Knowledge Discov-
ery and Data Mining (KDD-2004), page 5968, January
2004.
[Bilenko et al., 2004] Mikhail Bilenko, Sugato Basu, and
Raymond J. Mooney.
Integrating constraints and metric
learning in semi-supervised clustering. In Proc. of 21st In-
ternational Conference on Machine Learning, pages 81–
88, July 2004.
[Campello et al., 2013] Ricardo J. G. B. Campello, Davoud
Moulavi, Arthur Zimek, and J¨org Sander. A framework
for semi-supervised and unsupervised optimal extraction
of clusters from hierarchies. Data Mining and Knowledge
Discovery, 27(3):344–371, 2013.
[Caruana et al., 2006] Rich Caruana, Mohamed Elhawary,
In Proc. of the In-
and Nam Nguyen. Meta clustering.
ternational Conference on Data Mining, 2006.
[Davidson and Ravi, 2009] I Davidson and SS Ravi. Us-
ing instance-level constraints in agglomerative hierarchi-
cal clustering: theoretical and empirical results. Data min-
ing and knowledge discovery, pages 1–30, 2009.
[Davis et al., 2007] Jason V. Davis, Brian Kulis, Prateek
Jain, Suvrit Sra, and Inderjit S. Dhillon.
Information-
theoretic metric learning. In Proceedings of the 24th In-
ternational Conference on Machine Learning, ICML ’07,
pages 209–216, New York, NY, USA, 2007. ACM.
[Garca et al., 2010] Salvador Garca, Alberto Fernndez, Julin
Luengo, and Francisco Herrera. Advanced nonparamet-
ric tests for multiple comparisons in the design of ex-
periments in computational intelligence and data mining:
Information Sciences,
Experimental analysis of power.
180(10):2044 – 2064, 2010. Special Issue on Intelligent
Distributed Information Systems.
[Hodges and Lehmann, 1962] J. L. Hodges and E. L.
Lehmann. Rank methods for combination of independent
experiments in analysis of variance. The Annals of Math-
ematical Statistics, 33(2):482–497, 1962.
[Hubert and Arabie, 1985] Lawrence Hubert and Phipps
Arabie. Comparing partitions. Journal of Classiﬁcation,
2(1):193–218, 1985.
[Lelis and Sander, 2009] Levi Lelis and J¨org Sander. Semi-
supervised density-based clustering. In 2009 Ninth IEEE
International Conference on Data Mining, pages 842–847,
Dec 2009.
[Mallapragada et al., 2008] Pavan K. Mallapragada, Rong
Jin, and Anil K. Jain. Active query selection for semi-
supervised clustering. In Proc. of the 19th International
Conference on Pattern Recognition, 2008.
[Nogueira et al., 2012] Bruno M Nogueira, M Jorge, and
Solange O Rezende. HCAC : Semi-supervised Hierarchi-

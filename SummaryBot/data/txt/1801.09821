Learning to Emulate an Expert Projective Cone Scheduler
Neal Master
Abstract
Projective cone scheduling deﬁnes a large class of rate-stabilizing policies for queueing models relevant to several
applications. While there exists considerable theory on the properties of projective cone schedulers, there is little
practical guidance on choosing the parameters that deﬁne them. In this paper, we propose an algorithm for designing an
automated projective cone scheduling system based on observations of an expert projective cone scheduler. We show that
the estimated scheduling policy is able to emulate the expert in the sense that the average loss realized by the learned
policy will converge to zero. Speciﬁcally, for a system with n queues observed over a time horizon T , the average loss for
. This upper bound holds regardless of the statistical characteristics of the system.
the algorithm is O
The algorithm uses the multiplicative weights update method and can be applied online so that additional observations
of the expert scheduler can be used to improve an existing estimate of the policy. This provides a data-driven method
for designing a scheduling policy based on observations of a human expert. We demonstrate the eﬃcacy of the algorithm
with a simple numerical example and discuss several extensions.
ln(T )(cid:112)ln(n)/T
(cid:16)
(cid:17)
1. Introduction
In a variety of application areas, processing systems
are dynamically scheduled to maintain stability and to
meet various other objectives.
Indeed, the basic prob-
lem in scheduling theory has been to ﬁnd and study poli-
cies that accomplish this task under diﬀerent modeling
assumptions.
In practice however, while human experts
may be able to manage real-world processing systems, it
is typically non-trivial to precisely quantify the costs and
objectives that govern expert schedulers. For example, in
operating room scheduling, ad hoc metrics have been ap-
plied in an attempt to model the cost of delays, e.g. [1], but
these metrics are largely subjective. The Delphi Method is
commonly used in management science to quantitatively
model expert opinions but such methods have no algorith-
mic guarantees and are not always reliable [2].
In this paper, we present an online algorithm that allows
us to emulate an expert scheduler based on observations of
the backlog of the queues in the system and observations of
the expert’s scheduling decisions. We use the term “emu-
late” to mean that while the parametric form of the learned
policy may not converge to the parametric form of the ex-
pert policy in all cases, it will always yield scheduling de-
cisions that on average converge to the expert’s decisions.
This oﬀers a data-driven way for designing autonomous
scheduling systems. We speciﬁcally consider a projective
cone scheduling (PCS) model which has applications in
manufacturing, call/service centers, and in communication
networks [3, 4].
Email address: neal.m.master@berkeley.edu (Neal Master)
The algorithm in this paper uses the multiplicative
weight update (MWU) method [5]. The MWU method
has been used in several areas including solving zero-sum
games [6], solving linear programs [7], and inverse opti-
mization [8]. Because the PCS policy can be written as
a maximization, our techniques are most similar to those
used in [8]. In [8], the authors apply an MWU algorithm
over a ﬁxed horizon to learn the objective of an expert who
is solving a sequence of linear programs. Our results diﬀer
from [8] in several ways. One is that because of the queue-
ing dynamics that we consider, our expert’s objective will
vary over time whereas in [8] the objective is constant. A
related issue is that in [8], when the expert has a decision
variable of dimension n, the dimension of the parameter
being learned is also n. In our case, when the expert has
a decision variable of dimension n (i.e. there are n queues
in the system), we need to estimate Θ(n2) parameters.
We also note that in this paper we provide an algorithm
that can be applied even when the horizon is not known
a priori.
The goal of inferring parts of an optimization model
from data is a well-studied problem in many other ap-
plications. For example, genetic algorithm heuristics have
been applied to estimate the objective and constraints of a
linear program in a data envelopment analysis context [9].
The goal of imputing the objective function of a convex
optimization problem has also been considered in the opti-
mization community, e.g. [10, 11]. These papers rely heav-
ily on the convexity of the objective and the feasible set.
This approach does not apply in a PCS context because
the set of feasible scheduling actions is discrete and hence
non-convex.
Preprint
January 29, 2018
This paper is also related to inverse reinforcement learn-
ing. Inverse reinforcement learning is the problem of esti-
mating the rewards of a Markov decision process (MDP)
given observations of how the MDP evolves under an opti-
mal policy [12]. Inverse reinforcement learning can be used
to emulate expert decision makers (referred to as “appren-
ticeship learning” in the machine learning community) as
long as the underlying dynamics are Markovian [13]. In
the PCS model, no such assumption is made and so our
results naturally do not require Markovian dynamics.
The remainder of this paper is organized as follows. Sec-
tion 2 speciﬁes the PCS model that we consider. Section 3
presents our algorithms and the relevant guarantees. Be-
cause we take a MWU approach to the problem, our guar-
antees are bounds on the average loss. However, we also
provide a concentration bound which gives guarantees on
the tail of the loss distribution. We provide a simple nu-
merical demonstration of our algorithms in Section 4. In
Section 5 we discuss some extensions of our results and we
conclude in Section 6.
2. Projective Cone Scheduling Dynamics
In this section we summarize the PCS model presented
in [4] and comment on the connection to the model pre-
sented in [3]. The PCS model has n queues each with
inﬁnite waiting room following an arbitrary queueing dis-
cipline. Time is discretized into slots t ∈ Z+
1. The backlog
in queue i at the beginning of time slot t is xt(i). The back-
log across all queues can be written as a vector xt ∈ Zn
+.
The number of customers that arrive at queue i at the
end of time slot t is at(i). The arrivals across all queues
can be written as a vector at ∈ Zn
+. Scheduling conﬁg-
urations are chosen from a ﬁnite set S (cid:40) Zn
If con-
+.
ﬁguration st ∈ S is chosen in time slot t then for each
queue i, min{st(i), xt(i)} customers are served at the be-
ginning of the time slot. We take the departure vector
as dt = min{st, xt} ∈ Zn
+ where the minimum is taken
component-wise. This gives us the following dynamics
xt+1 = xt − dt + at
(1)
where x0 ∈ Zn
+ is arbitrary. Note that the arrival vector is
allowed to depend on previous scheduling conﬁgurations,
previous arrivals, and previous backlogs in an arbitrary
way.
The scheduling conﬁgurations are dynamically chosen
by solving the maximization
s∈S (cid:104)s, Bxt(cid:105) = max
s∈S
max
(cid:88)
i,j
s(i)B(i, j)xt(j)
(2)
where B ∈ Rn×n is symmetric and positive-deﬁnite with
non-positive oﬀ-diagonal elements. We assume that S is
endowed with some arbitrary ordering used for breaking
ties. This PCS policy deﬁnes a broad class of scheduling
policies and in particular we note that by taking B as the
identity matrix, we return to the typical maximum weight
matching scheduling algorithm.
Although B is a matrix, because B is symmetric, there
are only p = n(n + 1)/2 rather than n2 free param-
eters that need to be learned. Consequently, we will
represent the projective cone scheduler with an upper-
triangular array rather than a matrix. In particular, take
b(i, i) ∝ B(i, i) for i ∈ [n] and b(i, j) ∝ −B(i, j) for
(i, j) ∈ {(i, j) ∈ [n] × [n] : i < j}2. We can also assume
i,j b(i, j) = 1. Then we
can write the projective cone scheduling decision as fol-
lows:
without loss of generality that (cid:80)
B(i, j)s(i)xt(j)
B(i, i)s(i)xt(i)
B(i, j)(s(i)xt(j) + s(j)xt(i))
(cid:111)
(cid:111)
st = arg max
= arg max
s∈S
= arg max
s∈S
i=1
j=1
s∈S (cid:104)s, Bxt(cid:105)
n(cid:88)
n(cid:88)
(cid:110)(cid:88)
(cid:88)
(cid:110)(cid:88)
−(cid:88)
i<j
= arg max
s∈S
b(i, i)s(i)xt(i)
i<j
(cid:44) µ(xt; b)
For convenience, let us deﬁne
b(i, j)(s(i)xt(j) + s(j)xt(i))
(3)
(4)
, i = j
, i (cid:54)= j
(cid:26) 1
−1
σ(i, j) =
(cid:88)
i≤j
(cid:26)
so that we we can write µ more compactly as follows:
µ(xt; b) = arg max
s∈S
σ(i, j)b(i, j)(s(i)xt(j) + s(j)xt(i))
(5)
Note that if we deﬁne yt, a normalized version of xt, as
follows,
yt =
xt
xt/(cid:107)xt(cid:107)1
, (cid:107)xt(cid:107)1 = 0
, otherwise
(6)
then we have that st = µ(xt; b) = µ(yt; b).
Modeling each customer as having a uniform determin-
istic service time is motivated largely by applications in
computer systems and in particular, packet switch schedul-
ing. However, PCS models with non-deterministic service
times have also been considered in the literature [3]. How-
ever, the results in [3] only apply to the case where B is
diagonal. We have opted to present our algorithms in the
1We use the notation Z+ = {0, 1, 2, . . .}.
2We use the notation [k] = {1, 2, . . . , k}.
context of the non-diagonal case because we feel that hav-
ing Θ(n2) parameters is more interesting than having only
Θ(n) parameters. Our algorithms can still be applied in
the case of stochastic service times; this is discussed along
with other extensions in Section 5.
Finally, we note that previous literature on PCS [3, 4]
has required a variety of additional assumptions. For ex-
ample, in [4] it is assumed that the arrival process is mean
ergodic. We do not require such an assumption and more-
over, while the results in [3] and [4] are primarily stability
guarantees, we make no assumptions on the stability of
the system.
3. The Learning Algorithm
In this section we present our algorithm. We ﬁrst
present a ﬁnite horizon algorithm and then leverage this to
present an inﬁnite horizon algorithm. For both algorithms,
we show that the average error is O(ln(T )(cid:112)ln(p)/T ). We
also provide a bound on the fraction of observations for
which the error exceeds our average case bound.
These algorithms are applied causally in an online fash-
ion. Although we do not focus on computational issues, we
note that computing µ(yt; b) is generally a diﬃcult prob-
lem. However, there are local search heuristics that allow
eﬃcient computation of µ(yt+1; b) based on the solution
to µ(yt; b) [14]. Our algorithms require the computation
of µ(yt; ˆbt) where ˆbt is the estimate of b at time t and so
an online algorithm is appropriate if we want to use the
previous solution as a warm start.
Before presenting the algorithms, we consider the loss
function of interest. Since the expert we are trying to
emulate is speciﬁed by the array b, it may seem reasonable
to want our estimates ˆbt to converge to b. However, this
goal is not as reasonable as it may seem. Because S is
discrete, it is possible that two diﬀerent values of b can
render the same scheduling decisions. Consequently, the
goal of exactly recovering b may be ill-posed. We aim to
emulate the expert scheduler so we want ˆst = µ(yt; ˆbt), the
scheduling decision induced by the estimate ˆbt, to be the
same as st, the expert’s scheduling decision. Hence, the
loss should directly penalize discrepancies between st and
ˆst. This leads us to jointly consider ˆbt and ˆst so that the
loss at time t is
(cid:88)
i≤j
where δt = ˆst − st. When b = ˆbt, we have that st = ˆst and
(cid:96)t = 0. In addition, when st = ˆst we have that (cid:96)t = 0 even
if b (cid:54)= ˆbt. The deﬁnition of µ will allow us to show below
that (cid:96)t ≥ 0.
Another advantage to this loss function is that it allows
us to give guarantees that are independent of the statistics
of the arrival process. For example, suppose that there are
no arrivals at some subset of the queues. In this case, it
would be unreasonable to expect to be able to estimate
the rows and columns of b relevant to those queues. More
generally, the arrival process may not suﬃciently excite
all modes of the system. By considering ˆst and ˆbt simul-
taneously, we can provide bounds that apply even in the
presence of pathological arrival processes.
3.1. A Finite Horizon Algorithm
We ﬁrst present Algorithm 1, a ﬁnite horizon algorithm
that requires knowledge of the horizon. Algorithm 1 is a
multiplicate weights update algorithm and this time hori-
zon is used to set the learning rate.
Algorithm 1:
Online Parameter Learning with a Fixed Horizon
Input : ((y1, s1), . . . , (yT , sT )) # observations
Output: (ˆb1, . . . , ˆbT ) # parameter estimates
Output: (ˆs1, . . . , ˆsT ) # scheduling estimates
1 η ←(cid:112)ln(p)/T
ˆbt ← wt/(cid:80)
2 w1 ← upper triangular array of 1s
3 for t = 1, . . . T do
i≤j wt(i, j)
ˆst ← µ(yt; ˆbt)
mt ← upper triangular array of 0s
δt = ˆst − st
if ˆst (cid:54)= st then
zt = δt/(cid:107)δt(cid:107)∞
for (i, j) ∈ [n]2 : i ≤ j do
mt(i, j) ← σ(i, j)(zt(i)yt(j) + zt(j)yt(i))
end
end
wt+1 ← wt(1 − ηmt) # component-wise
10
11
12
13
14
15 end
Theorem 1. Let
D = max
(u,v)∈S 2
(cid:107)u − v(cid:107)∞
and p = n(n + 1)/2.
Algorithm 1 satiﬁes the following inequality:
If T > 4 ln(p) then the output of
(cid:114)
T(cid:88)
t=1
Proof. Note that because mt ∈ [−1, 1]p and η < 1
directly apply [5, Corollary 2.2.]:
2 we can
(cid:96)t =
σ(i, j)(ˆbt(i, j)−b(i, j))(δt(i)yt(j)+δt(j)yt(i)) (7)
0 ≤ 1
(cid:96)t ≤ 2D
ln(p)
(8)
T(cid:88)
t=1
(cid:88)
≤ T(cid:88)
i≤j
(cid:88)
mt(i, j)ˆbt(i, j)
t=1
i,j
(mt(i, j) + η |mt(i, j)|)b(i, j) +
ln(p)
(9)
i≤j
ˆbt(i, j) = 1 we have the
Since |mt(i, j)| ≤ 1 and (cid:80)
following:
T(cid:88)
t=1
(cid:88)
≤ T(cid:88)
i≤j
(cid:88)
mt(i, j)ˆbt(i, j)
mt(i, j)b(i, j) + ηT +
(10)
ln(p)
i,j
t=1
is minimized when η = (cid:112)ln(p)/T . Rearranging the in-
A straightforward calculation shows that this upper bound
equality and applying this fact give us the following:
T(cid:88)
(cid:88)
t=1
(cid:114)
i≤j
≤ 2
ln(p)
mt(i, j)ˆbt(i, j) − 1
T(cid:88)
(cid:88)
t=1
i≤j
mt(i, j)b(i, j)
(11)
Now we apply the speciﬁcs of mt. By deﬁnition of D,
(cid:107)δt(cid:107)∞ ≤ D. This gives us the following:
σ(i, j)(δt(i)yt(j) + δt(j)yt(i))ˆbt(i, j)
σ(i, j)(−δt(i)yt(j) − δt(j)yt(i))b(i, j)
Algorithm 2:
Online Parameter Learning with an Unknown Horizon
Input : ((y1, s1), (y2, s2), . . .) # observations
Output: (ˆb1, ˆb2, . . .) # parameter estimates
Output: (ˆs1, ˆs2, . . .) # scheduling estimates
1 T−1 (cid:44) 0
2 Tk (cid:44) 2k(4 ln(p)) for k ∈ {0, 1, 2, . . .}.
3 for t = 1, 2, . . . do
if Tk < t ≤ Tk+1 then
Apply Algorithm 1
with T ≡ Tk and without re-initializing wt
end
8 end
Theorem 2. Suppose T ≥ T0. Deﬁne lg(·) as (cid:100)log2(·)(cid:101).
Then the output of Algorithm 2 satiﬁes the following in-
equality:
T(cid:88)
t=1
0 ≤ 1
(cid:96)t ≤ 2
2D lg
(cid:19)(cid:114)
(cid:18) 2T
T0
ln(p)
(13)
Note that these are the same bounds as in Theorem 1
but with an additional factor of
2 lg(2T /T0).
Proof. First note that the proof of [5, Corollary 2.2.] does
not require the initial weights to be uniform so Theorem 1
still applies even without the initialization on line 2 of
Algorithm 1. For convenience, let Uk = 2D(cid:112)ln(p)/Tk and
(12)
take K = lg(T /T0). Applying Theorem 1 to each stage of
Algorithm 2 gives us the following:
(cid:96)t
t=1
0 ≤ T(cid:88)
≤ K(cid:88)
Tk(cid:88)
(cid:96)t ≤ K(cid:88)
TkUk ≤ K(cid:88)
(cid:112)
≤ 2D(K + 1)(cid:112)ln(p)
2D(K + 1)(cid:112)ln(p)
≤ 2
TK
k=0
k=0
k=0
t=1
2D(cid:112)ln(p)
(cid:112)
Tk
(14)
The ﬁrst inequality follows from the fact that (cid:96)t ≥ 0; the
second inequality follows by extending the sum from T up
to TK; the third and fourth inequalities follow from The-
orem 1. The penultimate inequality follows from the fact
that {Tk} is an increasing sequence and the ﬁnal inequality
follows because TK can be no more that 2T .
Dividing by T gives the desired result.
3.3. A Concentration Bound
Our previous results provided bounds on the average
loss of our algorithms. In this section, we provide bounds
for the tail of the distribution of the loss. This gives us
the guarantee that the fraction of observations for which
the loss exceeds our average case bound tends to zero.
T(cid:88)
T(cid:88)
t=1
t=1
i≤j
(cid:88)
(cid:88)
(cid:114)
i≤j
≤ 2D
ln(p)
(cid:88)
i≤j
≥(cid:88)
i≤j
Note that ˆst = µ(yt; ˆbt) and µ is deﬁned in terms of a
maximization. Therefore,
σ(i, j)(ˆst(i)yt(j) + ˆst(j)yt(i))ˆbt(i, j)
σ(i, j)(s(i)yt(j) + s(j)yt(i))ˆbt(i, j)
for any s ∈ S. This shows that each term in the ﬁrst
Ces`aro sum in (12) is non-negative. Similarly, each term
in the second Ces`aro sum in (12) is non-negative. This
gives us a lower bound of zero. Rearranging the terms
leaves us with the desired results.
3.2. An Inﬁnite Horizon Algorithm
We now present Algorithm 2, an inﬁnite horizon algo-
rithm that dynamically changes the learning rate. Al-
gorithm 2 applies the “doubling trick” to Algorithm 1.
The idea is that we deﬁne epochs [Tk, Tk+1] where
Tk = 2k(4 ln(p)) for k ≥ 0 with T−1 = 0. The duration
of the kth epoch is Tk and in this epoch we apply Algo-
rithm 1. Up to poly-logarithmic factors of T , this gives us
the same convergence rate that we had for Algorithm 1.
Theorem 3. Let
t ≤ T : (cid:96)t > 2
2D lg
(cid:12)(cid:12)(cid:12)(cid:12)(cid:26)
(cid:16) 2T
T0
(cid:17)(cid:113) ln(p)
T + 
(cid:27)(cid:12)(cid:12)(cid:12)(cid:12)
fT () =
(15)
be the fraction of observations up to time T ≥ T0 for which
the loss exceeds the average-case bound by at least . Then
for any  > 0 we have that
(cid:17)(cid:113) ln(p)
fT () ≤ 1 −
(cid:16) 2T
2D lg
(16)
T + 
T0
and hence,
lim
T→∞ fT () = 0.
(17)
Proof. The observed loss sequence {(cid:96)t}T
t=1 deﬁnes a point
measure on R+ where each point has mass 1/T . Applying
Markov’s Inequality to this measure gives us that
fT () ≤
2D lg
2D lg
T + 
T + 
(cid:16) 2T
(cid:16) 2T
T0
T0
(cid:17)(cid:113) ln(p)
(cid:17)(cid:113) ln(p)
(cid:18) 2T
2D lg
T0
(cid:19)(cid:114)
lim
T→∞ 2
Rearranging the upper bound gives the ﬁrst result. For
the second result we simply take the limit and note that
(a) Evolution of ˆbt
(cid:19)(cid:114)
(cid:18) 2T
T0
ln(p)
T(cid:88)
t=1
(cid:96)t
2D lg
· 1
· 2
ln(p)
= 0.
4. A Numerical Demonstration
We now demonstrate Algorithm 2 on a small example
of n = 2 queues. In each time slot, the number of arriving
customers is geometrically distributed on Z+. For queue 1
the mean number of arriving customers is 1 and for queue
2 the mean number of arriving customers is 2. The arrivals
are independent across time slots as well as across queues.
We take
b =
(cid:20) 0.5 0.3
,(cid:2) 2
0.2
,(cid:2) 1 0 (cid:3)(cid:48)
(cid:21)
1 (cid:3)(cid:48)
,(cid:2) 0 2 (cid:3)(cid:48)(cid:111)
(cid:110)(cid:2) 0 0 (cid:3)(cid:48)
and
S =
This choice of b shows that the expert scheduler prioritizes
queue 1 over queue 2 and the expert also has a preference
to not serve both queues simultaneously. We simulate the
system and run Algorithm 2 for T = 106 time slots with
x0 = (cid:2) 0 0 (cid:3)(cid:48)
. The results are shown in Figure 1.
First note that Figure 1a shows that the ˆbt does not
converge to b. We see that (to 4 decimal places)
(cid:20) 0.4998
ˆbT =
(cid:21)
0.3018
0.1984
(b) Error in learned scheduling decisions
(c) Average realized loss
Figure 1: Output of Algorithm 2 for the example in Section 4
0.450.500.55ˆbt(0,0)b(0,0)0.270.300.33ˆbt(0,1)b(0,1)0.00.20.40.60.81.0Time1e60.180.200.22ˆbt(1,1)b(1,1)0.00.20.40.60.81.0Time1e60.00.51.01.52.0kˆst−stk∞0.00.20.40.60.81.0Time1e610-310-210-1100101Average LossRealizedUpper Boundand for the majority of the simulation these parameter
estimates do not change. The reason is that (as shown in
in Figure 1b) ˆbT yields the same scheduling decisions as b.
The algorithm learns to emulate the expert scheduler so
the loss becomes zero and the weights stop updating. This
possibility was discussed at the beginning of Section 3.
Figure 1c which shows that while the average loss does
indeed tend to zero, the upper bound proved in Theorem 2
is quite loose in this situation. This is expected due to
the generality of the theorem. This also means that the
concentration bound in Theorem 3 is quite conservative.
Indeed, for this simulation we see that ft() = 0 for all t
and for any  > 0. In other words, no observed loss ever
exceeds the average case bound.
5. Extensions
We now discuss some extensions to our algorithms. We
ﬁrst note that we could replace line 14 in Algorithm 1 with
same goals as a human manager. We have provided several
theoretical guarantees and have numerically demonstrated
the eﬃcacy of the algorithm on a simple example.
This paper opens the door for a few area of future work.
One idea is to provide tighter bounds that depend on the
statistical properties of the arrival process. A beneﬁt of
the current approach is that it does not require any as-
sumptions on the arrival process but the clear downside is
that the resulting bounds are quite loose. An algorithm
that uses information about the arrival process could have
faster convergence rates and tighter bounds.
Another idea is to investigate the impact of an approx-
imate computation of µ. As mentioned in Section 3, in
large-scale problems, exactly computing µ(y; b) is gener-
ally a diﬃcult problem and heuristic approaches are typ-
ically taken in practice. An area of future work would
be to consider how such approximation “noise” aﬀects our
ability to emulate the expert scheduler.
wt+1 ← wt · exp(−ηwt).
References
The new algorithm would be a Hedge-style algorithm and
we would be able to use apply other results (e.g. [5, The-
orem 2.4]) to obtain similar upper bounds on the average
loss.
We also note that we could modify our algorithms and
obtain tighter upper bounds if we impose additional as-
sumptions on the expert. For example, the expert may
have a fairly simple objective that leads to prioritization
of some queues over others. In this case, we would have
b(i, j) = 0 for i (cid:54)= j. Rather than having a triangular ar-
ray of p parameter estimates, we could instead keep track
of just n estimates. Since Θ(ln(p)) = Θ(ln(n)), the con-
vergence rate would not change but we would have smaller
constant factors. Other sparsity patterns could be handled
in a similar fashion. The diagonal case is slightly simpler
because there would be no need use σ(i, j) to keep track
of the appropriate signs.
As noted in Section 2, a continuous-time PCS model
with heterogenous and stochastic service times was con-
sidered in [3]. Our algorithms could be applied in this
setting as well by updating the algorithm immediately af-
ter customer arrivals and departures rather than in dis-
crete time slots.
In [3], B is diagonal and so we could
apply the simpliﬁcations mentioned above. Our theorems
would still hold because they not require that the state up-
date happen at regularly spaced intervals – the algorithms
merely require a stream of observed backlogs and observed
scheduling actions.
6. Conclusions and Future Work
In this paper we have proposed an algorithm that learns
a scheduling policy that emulates the behavior of an expert
projective cone scheduler. This oﬀers a data-driven way of
designing automated scheduling policies that achieve the
[1] N. Master, Z. Zhou, D. Miller, D. Scheinker, N. Bambos,
P. Glynn, Improving predictions of pediatric surgical durations
with supervised learning, International Journal of Data Science
and Analytics (2017) 1–18.
[2] C. Okoli, S. D. Pawlowski, The Delphi method as a research
tool: an example, design considerations and applications, Infor-
mation & management 42 (1) (2004) 15–29.
[3] M. Armony, N. Bambos, Queueing dynamics and maximal
throughput scheduling in switched processing systems, Queue-
ing systems 44 (3) (2003) 209–252.
[4] K. Ross, N. Bambos, Projective cone scheduling (PCS) algo-
rithms for packet switches of maximal throughput, IEEE/ACM
Transactions on Networking 17 (3) (2009) 976–989.
[5] S. Arora, E. Hazan, S. Kale, The Multiplicative Weights Up-
date Method: a Meta-Algorithm and Applications., Theory of
Computing 8 (1) (2012) 121–164.
[6] Y. Freund, R. E. Schapire, Adaptive game playing using mul-
tiplicative weights, Games and Economic Behavior 29 (1-2)
(1999) 79–103.
[7] S. A. Plotkin, D. B. Shmoys, ´E. Tardos, Fast approximation
algorithms for fractional packing and covering problems, Math-
ematics of Operations Research 20 (2) (1995) 257–301.
[8] A. B¨armann, S. Pokutta, O. Schneider, Emulating the Expert:
Interna-
Inverse Optimization through Online Learning,
tional Conference on Machine Learning, 2017, pp. 400–410.
in:
[9] M. D. Troutt, A. A. Brandyberry, C. Sohn, S. K. Tadisina, Lin-
ear programming system identiﬁcation: The general nonnega-
tive parameters case, European Journal of Operational Research
185 (1) (2008) 63–75.
[10] A. Keshavarz, Y. Wang, S. Boyd, Imputing a convex objec-
tive function, in: IEEE International Symposium on Intelligent
Control, IEEE, 2011, pp. 613–619.
[11] J. Thai, A. M. Bayen, Imputing a variational inequality function
or a convex objective function: A robust approach, Journal of
Mathematical Analysis and Applications.
[12] A. Y. Ng, S. J. Russell, Algorithms for inverse reinforcement
learning., in: International Conference on Machine Learning,
2000, pp. 663–670.
[13] P. Abbeel, A. Y. Ng, Apprenticeship learning via inverse re-
inforcement learning, in: International Conference on Machine
learning, ACM, 2004, pp. 1–8.
[14] K. Ross, N. Bambos, Local search scheduling algorithms for
maximal throughput in packet switches, in: Annual Joint Con-
ference of the IEEE Computer and Communications Societies
(INFOCOM), Vol. 2, IEEE, 2004, pp. 1158–1169.
